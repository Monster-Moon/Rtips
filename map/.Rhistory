pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
brewer.pal.info
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(df$mag), max(df$mag),
value = range(df$mag), step = 0.1
)
)
)
server = function(input, output, session) {
filteredData <- reactive({
df[df$mag >= input$range[1] & df$mag <= input$range[2],]
})
output$map <- renderLeaflet({
leaflet(df) %>% addTiles()
})
observe({
proxy <- leafletProxy("map", data = df)
proxy %>% clearControls() %>%
addLegend(position = "bottomright", values = ~mag
)
}
})
}
shinyApp(ui, server)
proxy %>%
addLegend(position = "bottomright", values = ~mag
)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(df$mag), max(df$mag),
value = range(df$mag), step = 0.1
)
)
)
server = function(input, output, session) {
filteredData <- reactive({
df[df$mag >= input$range[1] & df$mag <= input$range[2],]
})
output$map <- renderLeaflet({
leaflet(df) %>% addTiles()
})
observe({
proxy <- leafletProxy("map", data = df)
proxy %>%
addLegend(position = "bottomright", values = ~mag)
)
}
})
}
shinyApp(ui, server)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(df$mag), max(df$mag),
value = range(df$mag), step = 0.1
)
)
)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles()
})
}
shinyApp(ui, server)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles() %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
})
}
shinyApp(ui, server)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
checkboxGroupInput('group1', 'group', choices = unique(df$group))
# sliderInput("range", "Magnitudes", min(df$mag), max(df$mag),
#             value = range(df$mag), step = 0.1)
)
)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles() %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
})
}
shinyApp(ui, server)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
selectInput('group1', 'group', choices = unique(df$group))
# sliderInput("range", "Magnitudes", min(df$mag), max(df$mag),
#             value = range(df$mag), step = 0.1)
)
)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles() %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
})
}
shinyApp(ui, server)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles() %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
})
filtered_data = reactive({
df %>% select(group == input$group1)
})
observe({
proxy = leafletProxy('map', data = filtered_data())
proxy %>% addPolygons(lng = filtered_data()$lon, lat = filtered_data()$lat)
})
}
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
selectInput('group1', 'group', choices = unique(df$group))
# sliderInput("range", "Magnitudes", min(df$mag), max(df$mag),
#             value = range(df$mag), step = 0.1)
)
)
)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
selectInput('group1', 'group', choices = unique(df$group))
# sliderInput("range", "Magnitudes", min(df$mag), max(df$mag),
#             value = range(df$mag), step = 0.1)
)
)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles() %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
})
filtered_data = reactive({
df %>% select(group == input$group1)
})
observe({
proxy = leafletProxy('map', data = filtered_data())
proxy %>% addPolygons(lng = filtered_data()$lon, lat = filtered_data()$lat)
})
}
shinyApp(ui, server)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles() %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
})
filtered_data = reactive({
df %>% dplyr::filter(group == input$group1)
})
observe({
proxy = leafletProxy('map', data = filtered_data())
proxy %>% addPolygons(lng = filtered_data()$lon, lat = filtered_data()$lat)
})
}
shinyApp(ui, server)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
selectInput('group1', 'group', choices = unique(df$group))
# sliderInput("range", "Magnitudes", min(df$mag), max(df$mag),
#             value = range(df$mag), step = 0.1)
)
)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles() %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
})
filtered_data = reactive({
df %>% dplyr::filter(group == input$group1)
})
observe({
proxy = leafletProxy('map', data = filtered_data()) %>%
clearShapes() %>%
proxy %>% addPolygons(lng = filtered_data()$lon, lat = filtered_data()$lat)
})
}
shinyApp(ui, server)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
selectInput('group1', 'group', choices = unique(df$group))
# sliderInput("range", "Magnitudes", min(df$mag), max(df$mag),
#             value = range(df$mag), step = 0.1)
)
)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles() %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
})
filtered_data = reactive({
df %>% dplyr::filter(group == input$group1)
})
observe({
proxy = leafletProxy('map', data = filtered_data()) %>%
clearShapes()
proxy %>% addPolygons(lng = filtered_data()$lon, lat = filtered_data()$lat)
})
}
shinyApp(ui, server)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
selectInput('group1', 'group', choices = unique(df$group))
# sliderInput("range", "Magnitudes", min(df$mag), max(df$mag),
#             value = range(df$mag), step = 0.1)
)
)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles() %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
})
filtered_data = reactive({
df %>% dplyr::filter(group == input$group1)
})
observe({
proxy = leafletProxy('map', data = filtered_data()) %>%
clearShapes()
proxy %>% addPolygons(lng = filtered_data()$lon, lat = filtered_data()$lat, fill = filtered_data()$mag)
})
}
shinyApp(ui, server)
?addPolygons
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
selectInput('group1', 'group', choices = unique(df$group))
# sliderInput("range", "Magnitudes", min(df$mag), max(df$mag),
#             value = range(df$mag), step = 0.1)
)
)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles() %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
})
filtered_data = reactive({
df %>% dplyr::filter(group == input$group1)
})
observe({
proxy = leafletProxy('map', data = filtered_data()) %>%
clearShapes()
proxy %>% addPolygons(lng = filtered_data()$lon, lat = filtered_data()$lat, fillOpacity = filtered_data()$mag)
})
}
shinyApp(ui, server)
quakes
brewer.pal.info
colorNumeric('BrBG', 1)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
selectInput('group1', 'group', choices = unique(df$group))
# sliderInput("range", "Magnitudes", min(df$mag), max(df$mag),
#             value = range(df$mag), step = 0.1)
)
)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles() %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
})
filtered_data = reactive({
df %>% dplyr::filter(group == input$group1)
})
colorpal <- reactive({
colorNumeric('BrBG', df$mag)
})
observe({
pal = colorpal()
proxy = leafletProxy('map', data = filtered_data()) %>%
clearShapes()
proxy %>% addPolygons(lng = filtered_data()$lon,
lat = filtered_data()$lat,
color = "#777777",
fillColor = ~pal(mag)
fillOpacity = filtered_data()$mag)
})
}
quakes
shinyApp(ui, server)
proxy %>% addPolygons(lng = filtered_data()$lon,
lat = filtered_data()$lat,
fillColor = ~pal(mag)
fillOpacity = 0.7)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles() %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
})
filtered_data = reactive({
df %>% dplyr::filter(group == input$group1)
})
colorpal <- reactive({
colorNumeric('BrBG', df$mag)
})
observe({
pal = colorpal()
proxy = leafletProxy('map', data = filtered_data()) %>%
clearShapes()
proxy %>% addPolygons(lng = filtered_data()$lon,
lat = filtered_data()$lat,
fillColor = ~pal(mag),
fillOpacity = 0.7)
})
}
shinyApp(ui, server)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
selectInput('group1', 'group', choices = unique(df$group))
# sliderInput("range", "Magnitudes", min(df$mag), max(df$mag),
#             value = range(df$mag), step = 0.1)
)
)
server = function(input, output, session){
output$map = renderLeaflet({
leaflet(df) %>% addTiles() %>%
fitBounds(~min(lon), ~min(lat), ~max(lon), ~max(lat))
})
filtered_data = reactive({
df %>% dplyr::filter(group == input$group1)
})
colorpal <- reactive({
colorNumeric('BrBG', df$mag)
})
observe({
pal = colorpal()
proxy = leafletProxy('map', data = filtered_data()) %>%
clearShapes()
proxy %>% addPolygons(lng = filtered_data()$lon,
lat = filtered_data()$lat,
fillColor = ~pal(mag),
fillOpacity = 0.7)
})
}
shinyApp(ui, server)
if(!require(sf)) install.packages('sf'); require(sf)
install.packages('classInt')
install.packages("sf", configure.args = "--with-proj-lib=/usr/local/lib/")
install.packages("classInt")
install.packages("classInt",dependencies = T)
require(sf)
if(!require(sf)) install.packages('sf'); require(sf)
install.packages("sf", dependencies = T)
install.packages('leafem')
install.packages('sf', type='mac.binary.mavericks', dependencies=TRUE)
require(sf)
install.packages('sf', type='mac.binary.mavericks', dependencies=TRUE)
install.packages('sf', type='mac.binary', dependencies=TRUE)
require(sf)
install.packages('classInt', type = 'mac.binary')
require(sf)
require(classInt)
install.packages(c("rgdal","sf"),"https://mac.R-project.org")
install.packages(c("rgdal","sf"), repos = "https://mac.R-project.org")
library(devtools)
install.packages('devtools')
require(sf)
require(units)
require(classInt)
install.packages('classInt')
install.packages('classInt')
require(classInt)
4 + 4+ 3.5 + 4+ 4+ 4.5 + 3.5 + 4.5 + 4.5
(4 + 4+ 3.5 + 4+ 4+ 4.5 + 3.5 + 4.5 + 4.5) / 9
4.5 * 8 + 7.5
(4.5 * 8 + 7.5) / 30
(4.5 * 8 + 7.5) / 10
4 + 4.5 + 4 + 3 + 3.5 + 4.5 + 4.5 + 3 + 4.5 + 3.5
(4 + 4.5 + 4 + 3 + 3.5 + 4.5 + 4.5 + 3 + 4.5 + 3.5) / 10
(4 + 4+ 3.5 + 4+ 4+ 4.5 + 3.5 + 4.5 + 4.5)
(4.5 * 8 + 7.5)
(4 + 4.5 + 4 + 3 + 3.5 + 4.5 + 4.5 + 3 + 4.5 + 3.5)
(36.5 + 43.5 + 39) / 29
rm(list = ls())
gc(reset = T)
if(!require(dplyr)) install.packages('dplyr'); require(dplyr)
if(!require(data.table)) install.packages('data.table'); require(data.table)
if(!require(ggplot2)) install.packages('ggplot2'); require(ggplot2)
if(!require(sf)) install.packages('sf'); require(sf)
if(!require(httr)) install.packages('httr'); require(httr)
if(!require(rvest)) install.packages('rvest'); require(rvest)
setwd('/Users/moon/Documents/GitHub/Rtips/map/')
if(!require(extrafont)) install.packages('extrafont'); require(extrafont)
theme_set(theme_gray(base_family='NanumGothic'))
mapp = st_read("행정구역.shp")
head(mapp)
p = ggplot(mapp) +
geom_sf(aes(fill = SIGUNGU_NM), colour = 'white') ## 서울시 지도, 자치구별 색상 다르게
p
# 행정구별 코드 정보 http://data.seoul.go.kr/dataVisual/seoul/seoulLivingPopulation.do
sdng_df = fread('sdng_cd.csv')
sdng_df = sdng_df %>%
mutate(H_SDNG_CD = as.character(H_SDNG_CD),
H_DNG_CD = as.character(H_DNG_CD))
get_df_fun = function(date_val_, tz_val_, sdng_df_, api_key_)
{
url = paste0('http://openapi.seoul.go.kr:8088/', api_key,
'/xml/SPOP_LOCAL_RESD_DONG/',
1, '/',
500, '/',
date_val, '/',
tz_val, '/')
tmp_lines = readLines(url)
df = lapply(c('stdr_de_id', 'tmzon_pd_se', 'adstrd_code_se', 'tot_lvpop_co'), function(x)
read_html(paste0(tmp_lines, collapse = '')) %>%
html_nodes('body row') %>% html_nodes(x) %>% html_text()) %>%
do.call('cbind', .) %>%
data.frame()
colnames(df) = c('date', 'tz', 'H_DNG_CD', 'TOT')
return(df %>% left_join(sdng_df, by = 'H_DNG_CD'))
}
vis_fun = function(mapp, date_val, tz_val, path = getwd(), sdng_df = sdng_df, api_key = api_key)
{
df = get_df_fun(date_val_ = date_val, tz_val_ = tz_val, sdng_df_ = sdng_df, api_key_ = api_key)
vis_df = mapp %>% left_join(df, by = c('ADM_CD' = 'H_SDNG_CD'))
g = ggplot(vis_df) + geom_sf(aes(fill = as.numeric(TOT))) +
scale_fill_viridis_c() + labs(fill = "생활인구")
ggsave(paste0(path, '/spopvis_', date_val, tz_val, '.jpg'), g)
}
api_key = '***'
date_val = '20210610'
tz_val = '12'
vis_fun(mapp, date_val, tz_val)
#### 2. 유동인구 API를 활용한 시각화  ####
# link: http://data.seoul.go.kr/dataList/OA-14991/S/1/datasetView.do
get_df_fun = function(date_val_, tz_val_, sdng_df_, api_key_)
{
url = paste0('http://openapi.seoul.go.kr:8088/', api_key_,
'/xml/SPOP_LOCAL_RESD_DONG/',
1, '/',
500, '/',
date_val_, '/',
tz_val_, '/')
tmp_lines = readLines(url)
df = lapply(c('stdr_de_id', 'tmzon_pd_se', 'adstrd_code_se', 'tot_lvpop_co'), function(x)
read_html(paste0(tmp_lines, collapse = '')) %>%
html_nodes('body row') %>% html_nodes(x) %>% html_text()) %>%
do.call('cbind', .) %>%
data.frame()
colnames(df) = c('date', 'tz', 'H_DNG_CD', 'TOT')
return(df %>% left_join(sdng_df, by = 'H_DNG_CD'))
}
vis_fun = function(mapp, date_val, tz_val, path = getwd(), sdng_df = sdng_df, api_key = api_key)
{
df = get_df_fun(date_val_ = date_val, tz_val_ = tz_val, sdng_df_ = sdng_df, api_key_ = api_key)
vis_df = mapp %>% left_join(df, by = c('ADM_CD' = 'H_SDNG_CD'))
g = ggplot(vis_df) + geom_sf(aes(fill = as.numeric(TOT))) +
scale_fill_viridis_c() + labs(fill = "생활인구")
ggsave(paste0(path, '/spopvis_', date_val, tz_val, '.jpg'), g)
}
date_val = '20210610'
tz_val = '12'
vis_fun(mapp, date_val, tz_val)
#### 2. 유동인구 API를 활용한 시각화  ####
# link: http://data.seoul.go.kr/dataList/OA-14991/S/1/datasetView.do
get_df_fun = function(date_val_, tz_val_, sdng_df_, api_key_)
{
url = paste0('http://openapi.seoul.go.kr:8088/', api_key_,
'/xml/SPOP_LOCAL_RESD_DONG/',
1, '/',
500, '/',
date_val_, '/',
tz_val_, '/')
tmp_lines = readLines(url)
df = lapply(c('stdr_de_id', 'tmzon_pd_se', 'adstrd_code_se', 'tot_lvpop_co'), function(x)
read_html(paste0(tmp_lines, collapse = '')) %>%
html_nodes('body row') %>% html_nodes(x) %>% html_text()) %>%
do.call('cbind', .) %>%
data.frame()
colnames(df) = c('date', 'tz', 'H_DNG_CD', 'TOT')
return(df %>% left_join(sdng_df, by = 'H_DNG_CD'))
}
vis_fun = function(mapp, date_val, tz_val, path = getwd(), sdng = sdng_df, api = api_key)
{
df = get_df_fun(date_val_ = date_val, tz_val_ = tz_val, sdng_df_ = sdng, api_key_ = api)
vis_df = mapp %>% left_join(df, by = c('ADM_CD' = 'H_SDNG_CD'))
g = ggplot(vis_df) + geom_sf(aes(fill = as.numeric(TOT))) +
scale_fill_viridis_c() + labs(fill = "생활인구")
ggsave(paste0(path, '/spopvis_', date_val, tz_val, '.jpg'), g)
}
date_val = '20210610'
tz_val = '12'
vis_fun(mapp, date_val, tz_val)
